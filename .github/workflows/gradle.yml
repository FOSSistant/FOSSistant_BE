name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/fossistant:latest .

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/fossistant:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Setup SSH private key
        run: |
          echo "${{ secrets.SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Debug SSH connection
        run: ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "echo ✅ SSH 접속 성공!"

      - name: SSH to Azure VM and Deploy
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            echo "✅ Creating Docker network (if not exists)..."
            sudo docker network create my-network || true

            echo "✅ Starting Redis container..."
            sudo docker rm -f redis || true
            sudo docker run -d --name redis --network my-network redis

            echo "✅ Stopping old application container..."
            sudo docker stop fossistant-container || true
            sudo docker rm fossistant-container || true

            echo "✅ Pulling latest application image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fossistant:latest

            echo "✅ Starting application container..."
            sudo docker run -d --name fossistant-container -p 8080:8080 \
              --network my-network \
              -e SPRING_DATASOURCE_URL="jdbc:mysql://fossistantdb.mysql.database.azure.com:3306/fossistantdb?sslMode=REQUIRED" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.AZURE_DB_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.AZURE_DB_PASSWORD }}" \
              -e SPRING_GEMINI_API_KEY="${{ secrets.GEMINI_KEY }}" \
              -e SPRING_REDIS_HOST="redis" \
              -e SPRING_REDIS_PORT="6379" \
              -e SPRING_GITHUB_TOKEN="${{ secrets.HUB_TOKEN }}" \
              ${{ secrets.DOCKER_USERNAME }}/fossistant:latest
